<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>info201 on</title><link>https://jethughes.github.io/notes/tags/info201/</link><description>Recent content in info201 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jethughes.github.io/notes/tags/info201/index.xml" rel="self" type="application/rss+xml"/><item><title>02-version-control-system</title><link>https://jethughes.github.io/notes/notes/02-version-control-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/02-version-control-system/</guid><description>git
VCS</description></item><item><title>03-agile-methodologies</title><link>https://jethughes.github.io/notes/notes/03-agile-methodologies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/03-agile-methodologies/</guid><description>guilding philosphy to develop info systems in unkown, rapidly changing evnironments
&amp;ldquo;Chaordic&amp;rdquo;
The agile manifesto
1 scrum Development is split into many short (~30 day) &amp;ldquo;sprints&amp;rdquo; of intense focus where the entire team is involved</description></item><item><title>04-requirements</title><link>https://jethughes.github.io/notes/notes/04-requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/04-requirements/</guid><description>requirements</description></item><item><title>06-business-functions-and-use-cases</title><link>https://jethughes.github.io/notes/notes/06-business-functions-and-use-cases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/06-business-functions-and-use-cases/</guid><description>approaches-to-systems-development
What are the two main approaches to systems development and how do they differ object oriented - system is a collection of objects tranditional - system is a collectin of processes business-functions</description></item><item><title>07-business-process-modelling</title><link>https://jethughes.github.io/notes/notes/07-business-process-modelling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/07-business-process-modelling/</guid><description> understand core conepts related to business process mondelling learn about commonly used business process modelling notations understand the elemeents of a UML activity diagram What is a business process business-process business-process-model business-process-model-and-notation unified-modelling-language</description></item><item><title>08-business-patterns</title><link>https://jethughes.github.io/notes/notes/08-business-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/08-business-patterns/</guid><description>entity-relationship-diagrams</description></item><item><title>09-data-modelling-and-normalisation</title><link>https://jethughes.github.io/notes/notes/09-data-modelling-and-normalisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/09-data-modelling-and-normalisation/</guid><description>redundancy-and-anomalies dependencies wia functional dependecy::when some attribute has exactly one associated other attribute wia transitive dependency:: A→B, B→C Transitive dependency wia partial dependency:: when a subset of the left determines the rightwia multivalued dependency::when something has a set of associated values of another attribute</description></item><item><title>10-oop-concepts-and-uml</title><link>https://jethughes.github.io/notes/notes/10-oop-concepts-and-uml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/10-oop-concepts-and-uml/</guid><description> what is the concept of encapsulation and how is it enforced for objects how does and object refernce differ from a relational foreign key give an example of how difference UML diagram types can be linked when modelling a system object unified-modelling-language</description></item><item><title>11-class-diagrams</title><link>https://jethughes.github.io/notes/notes/11-class-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/11-class-diagrams/</guid><description>class-diagrams</description></item><item><title>12-modelling-behaviour</title><link>https://jethughes.github.io/notes/notes/12-modelling-behaviour/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/12-modelling-behaviour/</guid><description>slides
modelling-behaviour
method signatures inheritance of behaviour lower level sequencing and flow of control compartmentalisation into &amp;ldquo;subsystems&amp;rdquo; Compare and contrast the two typical approaches to inheriting behaviour in OO systems.</description></item><item><title>13-UML-sequence-diagrams</title><link>https://jethughes.github.io/notes/notes/13-UML-sequence-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/13-UML-sequence-diagrams/</guid><description>sequence-diagrams</description></item><item><title>15-from-models-to-code-and-back</title><link>https://jethughes.github.io/notes/notes/15-from-models-to-code-and-back/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/15-from-models-to-code-and-back/</guid><description> UML to Java Foward Engineering round-trip-engineering</description></item><item><title>16-reverse engineering</title><link>https://jethughes.github.io/notes/notes/16-reverse-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/16-reverse-engineering/</guid><description>uml-java-reverse-engineering</description></item><item><title>17-data-access</title><link>https://jethughes.github.io/notes/notes/17-data-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/17-data-access/</guid><description> data-access
file-based-storage database-based-storage data-access-object java-database-connectibity</description></item><item><title>18-advanced-SQL</title><link>https://jethughes.github.io/notes/notes/18-advanced-sql-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/18-advanced-sql-1/</guid><description>varchar usually bigger than you think
CRUD insert adds a row select retrieves rows from the table ouput can be &amp;ldquo;saved&amp;rdquo; as a view changes to the underlying table also chagnes the view update modifies rows delete removes rows test as a select statement first SQL DAO programming We want to miniminse load on sql as connecting to database is expensive.</description></item><item><title>19-advanced-sql-2</title><link>https://jethughes.github.io/notes/notes/19-advanced-sql-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/19-advanced-sql-2/</guid><description>CASE basically a switch statement
derived valye where calcyulation isnt simple standardising values e.g., booleans: t/f, y/n, 0/1 flipping between row and col orientation (privoting) all students vs all on one students papers Set operators relations are sets of tuples ⇒ we can use set operators</description></item><item><title>20-data-integrity</title><link>https://jethughes.github.io/notes/notes/20-data-integrity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/20-data-integrity/</guid><description>Data Integrity GIGO
Types of error
ennecessary duplication of data missing information (expecially nulls) referential integrity problems: broken links, &amp;ldquo;orhpan&amp;rdquo; records (foreign keys) data entry errors: typos/keying errors, value in wrong field invalid/nonsensical data, e.</description></item><item><title>21-software-architecture-and-templates</title><link>https://jethughes.github.io/notes/notes/21-software-architecture-and-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/21-software-architecture-and-templates/</guid><description>software-architectures
system-templates</description></item><item><title>22-performance-and-security</title><link>https://jethughes.github.io/notes/notes/22-performance-and-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/22-performance-and-security/</guid><description>Performance requirements e.g., credit card system functional reqs sales authorised only for valid cards generate monthly statements performance requirements cards are validated quickly statements are accurate and generated on time quickly, accurate, and on time need to be operationalised, measured, and tested.</description></item><item><title>25-cost-benefit-analysis</title><link>https://jethughes.github.io/notes/notes/25-cost-benefit-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/25-cost-benefit-analysis/</guid><description>justifying a project of difficult to prove justification three criteria need funds strong will deciding whether to pursue a project what the project address a problem opportunity directive time frame overall priority what options do you have Case study Feasability analysis should we build it (organisational) nature and strength of need strategic alignment?</description></item><item><title>activity-diagrams</title><link>https://jethughes.github.io/notes/notes/activity-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/activity-diagrams/</guid><description>3.4 Activites and transitions
activities
take place over some pariod of time linked by transitions (arrows) only one starting point potentaily many ending conditions Transitions</description></item><item><title>approaches-to-systems-development</title><link>https://jethughes.github.io/notes/notes/approaches-to-systems-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/approaches-to-systems-development/</guid><description>regardless of the approach, the concept of the model is import for analysis, design, and modelling paradigms
1 traditional system is a collection of process function programming processes interact with data processes accept inputs and produce ouputs</description></item><item><title>behaviour-driven-development</title><link>https://jethughes.github.io/notes/notes/behaviour-driven-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/behaviour-driven-development/</guid><description>Models should be created with the users needs in mind. Required bahaviour determines acceptance criteria This is called Behaviour Driven Development</description></item><item><title>business-analyst</title><link>https://jethughes.github.io/notes/notes/business-analyst/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/business-analyst/</guid><description/></item><item><title>business-functions</title><link>https://jethughes.github.io/notes/notes/business-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/business-functions/</guid><description>what the business ought to be doing not who, how, stucture, tech each business function becomes a set of features within an info system</description></item><item><title>business-process</title><link>https://jethughes.github.io/notes/notes/business-process/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/business-process/</guid><description>A sequence of tasks or steps required to carry out a particular business function e.g.,: pocure new assets apply for leave process and orer enrol a student paper and or computer based processes processes can have sub-processes ⇒ nested hierarchy terminology business processes are also know as workflows activity usually means the same thing as tasl example: processing an order</description></item><item><title>business-process-model</title><link>https://jethughes.github.io/notes/notes/business-process-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/business-process-model/</guid><description> graphical depiction fo one ormore business proccesses some variant of a flowchart many different approaches BPMN UML activity-diagrams data flow diagrams DFDs good for security business process execution language BPEL programm how a process with go can be executed subject oriented business process mangement (s-BPM) and many more may be execultable developed alongside data models ( ERDs, class-diagrams etc)</description></item><item><title>business-process-model-and-notation</title><link>https://jethughes.github.io/notes/notes/business-process-model-and-notation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/business-process-model-and-notation/</guid><description>BPMN
graphical diagramming language free international vendor standard developed by the object management group shows only the order of activites when, not under what conditions do not: detail the activites describe how it is informed 1 Components 1.</description></item><item><title>class-diagrams</title><link>https://jethughes.github.io/notes/notes/class-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/class-diagrams/</guid><description>General example ERD vs class diagram
1 Stereotypes add further meaning to fields and methods
e.g., &amp;laquo; unique &amp;raquo;, &amp;laquo; abstrat &amp;raquo;, &amp;laquo; interface &amp;raquo;, 2 Packages group classes together break system to logical chunks package diagram, a class diagram with nothing but packages</description></item><item><title>conceptual-vs-ipmlementation-models</title><link>https://jethughes.github.io/notes/notes/conceptual-vs-ipmlementation-models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/conceptual-vs-ipmlementation-models/</guid><description>Models like ERDs are used to represent a high level conceptual overview of a system, or to as a lower level specification that can drive the implementation of the database.</description></item><item><title>data-access</title><link>https://jethughes.github.io/notes/notes/data-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/data-access/</guid><description>Most infosystems require persistent data. e.g.,
save to file save to database Some systems require several persistent data stores. e.</description></item><item><title>data-access-object</title><link>https://jethughes.github.io/notes/notes/data-access-object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/data-access-object/</guid><description>Designing DAOs general rule: one DAO per &amp;ldquo;logical unit&amp;rdquo; of data access many DAOs are just for one class e.</description></item><item><title>database-based-storage</title><link>https://jethughes.github.io/notes/notes/database-based-storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/database-based-storage/</guid><description>managed by DBMS usually SQL based also noSQL for unstructured big data advantages multi user support transactions (failure recovery) (centralised) constraints and referntial integrity flexible and ad-hoc querying manage large data Database APIS APIs #unfinished</description></item><item><title>dependencies-among-attributes</title><link>https://jethughes.github.io/notes/notes/dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/dependencies/</guid><description>Functional Depenencies (FDs) If for any given value of attribute A there is exactly one associated value of attribute B, then A functionally determines B (loosely)</description></item><item><title>developer</title><link>https://jethughes.github.io/notes/notes/developer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/developer/</guid><description/></item><item><title>domain-driven-design</title><link>https://jethughes.github.io/notes/notes/domain-driven-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/domain-driven-design/</guid><description>A method of designing software by designing models of the domain and creating software which conforms to those models</description></item><item><title>entity-relationship-diagrams</title><link>https://jethughes.github.io/notes/notes/entity-relationship-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/entity-relationship-diagrams/</guid><description>cardinality identifying vs non identifying relationship
labels are important - but not always needed
associative entity =&amp;gt; changes many to many relationship with additional relationship</description></item><item><title>extreme-programming</title><link>https://jethughes.github.io/notes/notes/extreme-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/extreme-programming/</guid><description>take current industry practices to the extreme
focus of proven industry practices combine them innovatively to get better results 1 Values and principles communication, simplicity, feedback, courage.</description></item><item><title>file-based-storage</title><link>https://jethughes.github.io/notes/notes/file-based-storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/file-based-storage/</guid><description>doesn&amp;rsquo;t scale well
demlimited text e.g., CSV TSV easy to create and process portable lowest common denominator structured text e.</description></item><item><title>furps</title><link>https://jethughes.github.io/notes/notes/furps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/furps/</guid><description>The furps framwork defines a robust way of defining and categorising requirements and constraints. Requirements are split into the following five categories:</description></item><item><title>info-201</title><link>https://jethughes.github.io/notes/notes/info-201/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/info-201/</guid><description> coursework tiddlywiki assignments tiddlywiki Outline version control system stakeholders business-analyst developer models systems-development-life-cycle agile-development scrum predictive-adaptive-spectrum domain-driven-design behaviour-driven-development requirements requirements-document requirements-guidelines requirements-engineering requirements-elicitation approaches-to-systems-development business-functions business-process business-process-model business-process-model-and-notation unified-modelling-language sequence-diagrams use-case-diagrams what-are-uml-diagrams use-case-diagrams entity-relationship-diagrams class-diagrams modelling behaviour conceptual-vs-ipmlementation-models redundancy-and-anomalies dependencies normalisation round-trip-engineering uml-java-forward-engineering data-access data-access-object java-database-connectibity SQL Lectures 02-version-control-system 04-requirements 06-business-functions-and-use-cases 07-business-process-modelling 08-business-patterns 09-data-modelling-and-normalisation 10-oop-concepts-and-uml 11-class-diagrams 12-modelling-behaviour 13-UML-sequence-diagrams 15-from-models-to-code-and-back 16-reverse engineering 17-data-access 18-advanced-sql-1 19-advanced-sql-2 20-data-integrity 21-software-architecture-and-templates</description></item><item><title>java-database-connectibity</title><link>https://jethughes.github.io/notes/notes/java-database-connectibity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/java-database-connectibity/</guid><description/></item><item><title>modelling-behaviour</title><link>https://jethughes.github.io/notes/notes/modelling-behaviour/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/modelling-behaviour/</guid><description>relevant slides, lecture recording, relevant article
Modelling behaviour is more complex than modelling the structure of OOP systems (e.g., class-diagrams.</description></item><item><title>models</title><link>https://jethughes.github.io/notes/notes/models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/models/</guid><description>&amp;ldquo;A model is an informative representation of an object, person or system&amp;rdquo;
Software is made up of models. It is not only &amp;ldquo;code&amp;rdquo; Models can be high level (mockups etc) or low level (code) Models can be executable (code, ec) or not (diagrams)</description></item><item><title>normalisation</title><link>https://jethughes.github.io/notes/notes/normalisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/normalisation/</guid><description>formal process of eliminanting unnecessary redundancy in relations by splitting relations into smaller chunks
bottom up approach
functional dependencies ⇒ normalised relations requirements ⇒ conceptual ≫ logical is &amp;ldquo;top down&amp;rdquo; use normalisation to verify your logical design to ensure you haven&amp;rsquo;t missed anything 1 Pros and cons frees from anomalies separates data the belong to different entities reduces data redundancy doesn&amp;rsquo;t bias db design infaour of certain queries at the expense of others more relations required more complex queries can imply slower performance in some DBMSs 2 Normal forms 1NF ⇒ Single valued attributes only 2NF ⇒ all on-key attibutes fully dependent on PK (i.</description></item><item><title>object</title><link>https://jethughes.github.io/notes/notes/object/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/object/</guid><description>Objects an abastraction of somethin gin a problem domain, reflecting the capabilities of the system to keep information about it interact with it or both</description></item><item><title>predictive-adaptive-spectrum</title><link>https://jethughes.github.io/notes/notes/predictive-adaptive-spectrum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/predictive-adaptive-spectrum/</guid><description/></item><item><title>redundancy-and-anomalies</title><link>https://jethughes.github.io/notes/notes/redundancy-and-anomalies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/redundancy-and-anomalies/</guid><description>Redundancy when values are stored repetitively in database relations
usually in poorly designed relations potential for anomalous data to be stored e.</description></item><item><title>requirements</title><link>https://jethughes.github.io/notes/notes/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/requirements/</guid><description>1 What are they “…descriptions of how the system should behave, application domain information, constraints on the system’s operation, or specifications of a system property or attribute.</description></item><item><title>requirements-document</title><link>https://jethughes.github.io/notes/notes/requirements-document/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/requirements-document/</guid><description>The requirements document is used to keep track of the requirements of a system. It hold information such as: constraints, the environment of the system, information about the domain of the system, and constraints</description></item><item><title>requirements-elicitation</title><link>https://jethughes.github.io/notes/notes/requirements-elicitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/requirements-elicitation/</guid><description>A process by which analysts gather information on what the system should do, from as many sources as possible. All methods are effective but some are more efficient than others.</description></item><item><title>requirements-engineering</title><link>https://jethughes.github.io/notes/notes/requirements-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/requirements-engineering/</guid><description>“…to cover all of the activities involved in discovering, documenting, and maintaining a set of requirements for a computer-based system.</description></item><item><title>requirements-guidelines</title><link>https://jethughes.github.io/notes/notes/requirements-guidelines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/requirements-guidelines/</guid><description>understandable by all stakeholders including the users non prescriptive i.e., should define what, and not how correct as judged by user complete.</description></item><item><title>round-trip-engineering</title><link>https://jethughes.github.io/notes/notes/round-trip-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/round-trip-engineering/</guid><description>This is the process of translating models into code, or vice versa. For example, ERDs to SQL, or UML to Java.</description></item><item><title>scrum</title><link>https://jethughes.github.io/notes/notes/scrum/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/scrum/</guid><description>Intense effort involving entire team for defined period of time Product backlog - prioritied list of requirements Product owner - cllient stakeholder who controls backlog Scrum master - project manager</description></item><item><title>sequence-diagrams</title><link>https://jethughes.github.io/notes/notes/sequence-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/sequence-diagrams/</guid><description>equence diagrams document a sequence of particpant interactions required to carry out a use case
actor &amp;lt;-&amp;gt; object actors are outside the system objects are otside the system via a method call might get a result object &amp;lt;-&amp;gt; object lifetime of interactions and objects when they are created updated destroyed time is a key aspect use-case-diagrams dont have order These diagrams are:</description></item><item><title>software-architectures</title><link>https://jethughes.github.io/notes/notes/software-architectures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/software-architectures/</guid><description># of pieces?
one integrated piece a few distinct components many distict components does it run:
on one machine spread across multiple machines in the cloud these consdier ations dtermine the structure of the software we create</description></item><item><title>stakeholders</title><link>https://jethughes.github.io/notes/notes/stakeholders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/stakeholders/</guid><description>People with interest in successful implementation
three primary groups
users clients -&amp;gt; pay for and own systems technical staff -&amp;gt; ensure system operation other classifications</description></item><item><title>system-templates</title><link>https://jethughes.github.io/notes/notes/system-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/system-templates/</guid><description>&amp;lt;% tp.file.cursor(4) %&amp;gt;
System templates some standard patterns is system design
especially with respect to structural requirements
database domain classes names of entites/classes may vary but pattern is the same broadly similar structures for similar problem domains</description></item><item><title>systems-development-life-cycle</title><link>https://jethughes.github.io/notes/notes/systems-development-life-cycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/systems-development-life-cycle/</guid><description>Provides overall framework for managing the systems There are many methodologies to help guide us through this cycle Each methodology sits on the predictive-adaptive-spectrum A very common methodology at the moment is agile-development</description></item><item><title>uml-java-forward-engineering</title><link>https://jethughes.github.io/notes/notes/uml-java-forward-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/uml-java-forward-engineering/</guid><description>similar to ERD to sql.
use case diagrams - more about system structure and features **class diagram - java class</description></item><item><title>uml-java-reverse-engineering</title><link>https://jethughes.github.io/notes/notes/uml-java-reverse-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/uml-java-reverse-engineering/</guid><description>Java -&amp;gt; UML reverse engineering reverse of uml-java-forward-engineering
parse java docs and generate corresponding uml diagrams useful to generate models of existing systems code usually has more detail than can be represented in diagrams automated diagram layout likely to be ugly ⇒ manual clean up some language specific features may not translate</description></item><item><title>unified-modelling-language</title><link>https://jethughes.github.io/notes/notes/unified-modelling-language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/unified-modelling-language/</guid><description> what-are-uml-diagrams use-case-diagrams class-diagrams entity relationship diagram activity-diagrams</description></item><item><title>unified-processes</title><link>https://jethughes.github.io/notes/notes/unified-processes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/unified-processes/</guid><description>oop development uses UML for modelling four phase life cycle
inception elaboration construction transition best practices develop iteratively define and mange system requirements effectively managing changes in requirements use component architectures create visual models (UML) verify quality Control changes Values and principles Values:</description></item><item><title>use-case-diagrams</title><link>https://jethughes.github.io/notes/notes/use-case-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/use-case-diagrams/</guid><description>specifies the participants (actors) and the relationships between them high level view of what a system does (not how) and who uses it represent users perspective of a system used mainly in requirements specification and early system dev effectively a todo list 1 pros informal,flexible, easy to construct easily understood improve communication between users and developers can be used to confirm requirements provide overview link analysis to design can be used to inform subsequent dev tasks derive test cases prioritise imlementation tasks help clarify new feature requests or bug reports 2 Notation 2.</description></item><item><title>version-control-systems</title><link>https://jethughes.github.io/notes/notes/version-control-systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/version-control-systems/</guid><description>VCSs (version control systems) Are systems to keep track of changes to a set of files E.g., [[git]]
0.1 Goals allow collaboration track changes restoring previous versions finding out origins of issues backups not restrict workflow 0.</description></item><item><title>what-are-uml-diagrams</title><link>https://jethughes.github.io/notes/notes/what-are-uml-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/what-are-uml-diagrams/</guid><description>A standard set of constructs and notation defined by the object management group for creating models
specify what not how</description></item></channel></rss>