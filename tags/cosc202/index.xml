<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cosc202 on</title><link>https://jethughes.github.io/notes/tags/cosc202/</link><description>Recent content in cosc202 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jethughes.github.io/notes/tags/cosc202/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://jethughes.github.io/notes/notes/reflective-statement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/reflective-statement/</guid><description>COSC202 Reflective Statement - Jet Hughes 9474308 Intro I was honestly not expecting this paper to be as interesting as it was.</description></item><item><title>07-testing</title><link>https://jethughes.github.io/notes/notes/07-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/07-testing/</guid><description>testing
test-driven-development
unit-testing
understand that testing is useful for detecting bugs</description></item><item><title>08-debugging</title><link>https://jethughes.github.io/notes/notes/08-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/08-debugging/</guid><description>debugging</description></item><item><title>09-documentation</title><link>https://jethughes.github.io/notes/notes/09-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/09-documentation/</guid><description>documentation</description></item><item><title>10-continuous-integration-1</title><link>https://jethughes.github.io/notes/notes/10-continuous-integration-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/10-continuous-integration-1/</guid><description> continuous-integration
explain the term continuous integration describe different purposes for CI indicate how CI jobs are usually triggered understand implications of CI running asynchronously Exlplain how to manage output from CI jobs describe role of stages and jobs within gitlab pipelines indicate how CI specifications are stored</description></item><item><title>11-continuous-integration-2</title><link>https://jethughes.github.io/notes/notes/11-continuous-integration-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/11-continuous-integration-2/</guid><description>Appreciate that GitLab is a complex software Understand where CI jobs scripts get run explain why repository servers can host websites Understand how gitblab dternmimines awhen a CI script failed Describe a way in which CI scripts scan handle secrets Outline uses of local git hook scripts continuous integration</description></item><item><title>12-automation</title><link>https://jethughes.github.io/notes/notes/12-automation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/12-automation/</guid><description>links: cosc-202-lectures, slides
automation
Garbage notes The use of automatic equipment in a production process. We desire to remove repetive work within software development</description></item><item><title>13-code-librarires</title><link>https://jethughes.github.io/notes/notes/13-code-librarires/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/13-code-librarires/</guid><description> software library
Explain what a software library is Describe reasons for/against using libraries Understand transitive dependencies in libraries Appreciate your obligations from using libraries Outline considerations when writing libraries Highlight features of the Java standard libraries</description></item><item><title>14-apis</title><link>https://jethughes.github.io/notes/notes/14-apis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/14-apis/</guid><description>purpose of apis apis vs code libraries why web technologies assist API development REST apis in cloud mircoservices building APIs maintenance of APIs application-programming-interface</description></item><item><title>15-containers</title><link>https://jethughes.github.io/notes/notes/15-containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/15-containers/</guid><description>containers
Describe what software containers are basically lightweight virtual machines Explain why containers are useful Encapsulate a computing environment Outline the role of container registries Store and share images E.</description></item><item><title>16-compilers</title><link>https://jethughes.github.io/notes/notes/16-compilers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/16-compilers/</guid><description>describe what it is and what is does
compilers vs interpreters
compile stages
why java is atypical of compiled languages</description></item><item><title>17-linkers-and-loaders</title><link>https://jethughes.github.io/notes/notes/17-linkers-and-loaders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/17-linkers-and-loaders/</guid><description>Appreciate kernel / userspace distinction
Sketch what OS loaders need to achieve
Contrast running Java versus C code</description></item><item><title>18-build-tools</title><link>https://jethughes.github.io/notes/notes/18-build-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/18-build-tools/</guid><description>understnad the purpose of build tools automate the construction of software sketch how make&amp;rsquo;s rules (re)build software has a set of taget and a set of sources checks whether targets are older than sources a MakeFile contains a list of commands that build the tager from the source builds in the correct order (topologically) e.</description></item><item><title>19-security</title><link>https://jethughes.github.io/notes/notes/19-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/19-security/</guid><description>why cybersecurity is a growing concern more software ∴ more dependecies ∴ more complex ∴ more &amp;ldquo;surface area&amp;rdquo; of risk of vulnerability sketch confidentiality, integrity, and avalability security confidentiality - protecting data from being stolen integrity - attacks on data with the aim to decieve users avalability - e.</description></item><item><title>20-software-licensing</title><link>https://jethughes.github.io/notes/notes/20-software-licensing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/20-software-licensing/</guid><description>pdf
what does it mean for people to use your software. What responsitilities do you have
Understand the default protection of code authors copyright Contrast ‘libre’ free and ‘gratis’ free libre: free as in freedom gratis: free as in no cost Define what makes open source software floss - free libre open source software Contrast copyleft and more permissive licences copyleft &amp;ldquo;viral licensing&amp;rdquo; usage of copyleft software required your software be copyleft also derivative must &amp;ldquo;copy&amp;rdquo; the same license others e.</description></item><item><title>22-open-source-software</title><link>https://jethughes.github.io/notes/notes/22-open-source-software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/22-open-source-software/</guid><description>Describe Origination how to floss projects get created forking an existing open source project mangement of existig project &amp;ldquo;run out of steam&amp;rdquo; users decide to take development of themselves some decides to apply an open source licence e.</description></item><item><title>anti-govt-protest-china</title><link>https://jethughes.github.io/notes/notes/anti-govt-protest-china/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/anti-govt-protest-china/</guid><description>China used facial recognition to identofy protesters
these protesters used masks and toppled lamposts to thwart this infrastructure</description></item><item><title>application-programming-interface</title><link>https://jethughes.github.io/notes/notes/application-programming-interface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/application-programming-interface/</guid><description>Allows code (and people) to interact with other people applications. They define interactions points (endpoints) within the code, where data is retrieved (GET) or inserted (POST).</description></item><item><title>automation</title><link>https://jethughes.github.io/notes/notes/automation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/automation/</guid><description>Automatation is the use of automatic equipment in a productions process. The goal is to remove repetitive tasks. Automation can be built within a tool, or it can be a tool that controls other tools.</description></item><item><title>branch</title><link>https://jethughes.github.io/notes/notes/branch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/branch/</guid><description>Split current dev path into two to work on e.g., a bug or a feature
1 Overview allows users to work independently development continues independently along each branch can easily switch between branches can push a branch without affecting others branches can be merged back into the original always at least one main branch (usually master, main, trunk) 2 Default branch used to be called master now called main 3 Methodologies 3.</description></item><item><title>build-tools</title><link>https://jethughes.github.io/notes/notes/build-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/build-tools/</guid><description>Build tools Tools that automate the construction of software,.
C if you recompile C you get an object file which can be linked.</description></item><item><title>compiler</title><link>https://jethughes.github.io/notes/notes/compiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/compiler/</guid><description>What are they/what do they do used to build stored programs usually program are written in a high level compiled language C, C++, Java, C#, etc Output machine code in binary This can be loaded and run by hardware Traditional Stages of Compilation lexing: This is the step where the source code is converted into tokens.</description></item><item><title>consoles-terminals-shells</title><link>https://jethughes.github.io/notes/notes/consoles-terminals-shells/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/consoles-terminals-shells/</guid><description>console -&amp;gt; io device which is part of a computer (physical terminal) console is the device: -&amp;gt; terminal is program inside that device terminal -&amp;gt; text input output environment (can be remote) windows terminal [[notes/shell]] -&amp;gt; program which the terminal/console sends input to which sends command to the OS [[notes/unix-shell]] powershell cmd bash, fish, zsh, ksh, sh, tsch 0.</description></item><item><title>containers</title><link>https://jethughes.github.io/notes/notes/containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/containers/</guid><description>What are (software) containers? Containers encapsulate a computing environment Facilitates portable and reproducible use of software Can wrap up application code and data, and much of OS Containers are lightweight virtual machines You need to boot them up, as for any OS .</description></item><item><title>continuous-integration</title><link>https://jethughes.github.io/notes/notes/continuous-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/continuous-integration/</guid><description>1 Overview Continuous integration (CI) is the practice of automating the integration of code changes from multiple contributors into a single software project - atlassian .</description></item><item><title>cosc-202</title><link>https://jethughes.github.io/notes/notes/cosc-202/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/cosc-202/</guid><description>Assignment reflective-statement-plan reflective-statement Outline consoles-terminals-shells git ethics-in-cs integrated-development-environments branch testing test-driven-development unit-testing debugging imperative programming documentation continuous-integration automation software library application-programming-interface containers linker loaders operating-system software-licensing [ security] Lectures 07-testing 08-debugging 09-documentation 10-continuous-integration-1 11-continuous-integration-2 12-automation 13-code-librarires 14-apis 15-containers 16-compilers 17-linkers-and-loaders 18-build-tools 19-security 20-software-licensing 22-open-source-software</description></item><item><title>debugging</title><link>https://jethughes.github.io/notes/notes/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/debugging/</guid><description>removing technical faults isolaing and remove technical faults a human process
requires creativity/disipline/knowledge deepr understanding of code debuggers are tools to help debugging</description></item><item><title>documentation</title><link>https://jethughes.github.io/notes/notes/documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/documentation/</guid><description>1 Who, what where Audience users other devs your team members anyone trying to understand you software your future self Locations source code project repo emebedding in program hosted separately User expectations evolving towards software that facilitates experimentation No help docs =&amp;gt; everything is self-explanatory high usability users familar with many abstractions e.</description></item><item><title>ethics-in-cs</title><link>https://jethughes.github.io/notes/notes/ethics-in-cs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/ethics-in-cs/</guid><description>1 Case studies [[notes/facial-recognition-in-US-riots-2021-01-06]] [[notes/anti-govt-protest-china]] [[notes/how-is-safe-enough-for-autonomous-vehicles]] 1.1 Differences 1 vs 2 Govt vs vigilante
my judgements contain additionl context e.</description></item><item><title>facial-recognition-in-US-riots-2021-01-06</title><link>https://jethughes.github.io/notes/notes/facial-recognition-in-US-riots-2021-01-06/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/facial-recognition-in-US-riots-2021-01-06/</guid><description>capital riots occured on 2021-01-06
there was video from the riots which contained faces
facial recognition acquired a pic of each person faces were uploaded to a website</description></item><item><title>finite-state-machine</title><link>https://jethughes.github.io/notes/notes/finite-state-machine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/finite-state-machine/</guid><description>A finite state machine is a program which has a number of states called nodes with transition edges between them. You then move the state of the program to a particular state by navigating through the edges.</description></item><item><title>git</title><link>https://jethughes.github.io/notes/notes/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/git/</guid><description>Git is a tool to track changes to sets of file It is the most commonly used [[notes/02-version-control-system]] 1 Team git protocols you can develop a team protocol for Git use</description></item><item><title>how-is-safe-enough-for-autonomous-vehicles</title><link>https://jethughes.github.io/notes/notes/how-is-safe-enough-for-autonomous-vehicles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/how-is-safe-enough-for-autonomous-vehicles/</guid><description>How safe is safe enough? its impossible to be perfect discalimer about driving assistant in teslas Not driving youself massively reduces reaction time</description></item><item><title>imperative-programming</title><link>https://jethughes.github.io/notes/notes/imperative-programming-language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/imperative-programming-language/</guid><description>wikipedia article
Imperative programming is a paradigm in which code specifiec a series of commands which a computer executes to change a programs state</description></item><item><title>integrated-development-environments</title><link>https://jethughes.github.io/notes/notes/integrated-development-environments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/integrated-development-environments/</guid><description>1 Types 1.1 Source code editors editor applications to help software development provide features that help editing code auto indent, bracket matching, syntax hl, auto completion, rapid navigation run/test code 1.</description></item><item><title>interpreter</title><link>https://jethughes.github.io/notes/notes/interpreter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/interpreter/</guid><description>What are they/what do they do &amp;ldquo;Interactive&amp;rdquo; tool to run high level interpreted languages. pythonm ruby, shell, R, js, PHP The interpreter program runs on CPU and executes program line by ine</description></item><item><title>libraries</title><link>https://jethughes.github.io/notes/notes/libraries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/libraries/</guid><description>what is a software library collections of potentailly useful code.
implement comon fuunctionality so you dont have to</description></item><item><title>linker</title><link>https://jethughes.github.io/notes/notes/linker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/linker/</guid><description>Linkers facilitate use of code in multiple languages, e.g. use C for programming speed of developer; use Assembly language for running speed of code But these days: often hard to beat optimising compilers!</description></item><item><title>loader</title><link>https://jethughes.github.io/notes/notes/loader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/loader/</guid><description>An executable file e.g., greet has to be loaded and run by your OS. Depending on your OS and your harwdare this might need to be done differently</description></item><item><title>operating-system</title><link>https://jethughes.github.io/notes/notes/operating-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/operating-system/</guid><description>Userspace This is where applications run. Computer resources are isolated in compute and data
cannot access memory belonging to another process cannot directly access hardware cannot occupy all of the CPUs time on one application Kernal &amp;ldquo;all seeing and all powerful&amp;rdquo; The kernel sits below the userspace and manages resource allocation and directly controls harware.</description></item><item><title>reflective-statement</title><link>https://jethughes.github.io/notes/notes/reflective-statement-plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/reflective-statement-plan/</guid><description>202 Reflective statement Intro
What is the project who was the team Overall of: Communication Time/Project Mangement Main Issues Main Non-Issues Communication</description></item><item><title>security</title><link>https://jethughes.github.io/notes/notes/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/security/</guid><description>Growing concern since there is more software, dependencies, and they are getting increaingly complex the &amp;ldquo;surface area&amp;rdquo; of risk is growing.</description></item><item><title>selenium</title><link>https://jethughes.github.io/notes/notes/selenium/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/selenium/</guid><description>Webdriver: implements web based tests
IDE: record/playback interactions with web browsers
You can mix automated and interactive options.</description></item><item><title>shell</title><link>https://jethughes.github.io/notes/notes/shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/shell/</guid><description> start and stop OS processes used to control OS connect output of one OS process to input of another process -&amp;gt; this is the idea of Unix pipes manage environment variables: pass params to programs parse and evaluate command line instructions from user</description></item><item><title>software-licensing</title><link>https://jethughes.github.io/notes/notes/software-licensing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/software-licensing/</guid><description>What does it mean for people to use your software. What responsitilities do you have
common perception: open source versus commercial</description></item><item><title>test-driven-development</title><link>https://jethughes.github.io/notes/notes/test-driven-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/test-driven-development/</guid><description>tests are developed before the code
are a spec of what the code should do
first they fail ⇒ as you develop, they pass</description></item><item><title>testing</title><link>https://jethughes.github.io/notes/notes/testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/testing/</guid><description>most software will contain bugs bug severity if not always equivalent to bug priority testing is seeking out bugs some test types unit tests integration tests ⇒ check units work together end-to-end tests ⇒ check behaviour of whole program 1 Limitations testing every code path is impossible</description></item><item><title>unit-testing</title><link>https://jethughes.github.io/notes/notes/unit-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/unit-testing/</guid><description>divide code into units ⇒ test those units
consider appropriate scale
depends on type of code project as well as language object oriented: classes?</description></item><item><title>unix-shell</title><link>https://jethughes.github.io/notes/notes/unix-shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/unix-shell/</guid><description>most common command shell (macOS, linux, android, ios) bash is another common shell windows shells: cmd.exe (legacy) powershell (more powerful than bash) many ways to run bash 1 Unix shell good/bad good embodies unix principle: separation of concerns minimal -&amp;gt; shell just manages interaction of other small tools highly programmable; supports complex automation bad has quirkiness that can trip everyone up tradeoffs Shell can be perfect to some tasks; terrible for others extremely powerful however also difficult to learn to use shells are in cosc202 as lowest-level, common means for controlling computers during software development</description></item></channel></rss>