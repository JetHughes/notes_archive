<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lecture on</title><link>https://jethughes.github.io/notes/tags/lecture/</link><description>Recent content in lecture on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jethughes.github.io/notes/tags/lecture/index.xml" rel="self" type="application/rss+xml"/><item><title>01-basic-html</title><link>https://jethughes.github.io/notes/notes/01-basic-html/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/01-basic-html/</guid><description>slides
html
3 Main parts
html - structure css - styles javascript - interactivity HTML Element:</description></item><item><title>01-bits-and-bytes</title><link>https://jethughes.github.io/notes/notes/01-bits-and-bytes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/01-bits-and-bytes/</guid><description>memory unicode ASCII digital-data
What is data A fact — a piece of information corresponds to discreete facts about phenomena from which we gain information abou the world The concept of a value is fundamental to data e.</description></item><item><title>01-information-assurance</title><link>https://jethughes.github.io/notes/notes/01-information-assurance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/01-information-assurance/</guid><description>information-security mccumber-cube access-security-tradeoff cia-triad In the news Axie hack Why info sec more interconnected more exposure software devs need to know about security often security is an afterthought this is bad IS proatects the ability of an organisation to function also protects reputation What is security protecting assets from harm or damage related concepts nation security (political security) safety (health) environmental security (clean environement) information security economic security (stability of ecomony) What is information secuity focus of protecting information assets data, systems, equipment, infrastructure intentional and accidental risks &amp;ldquo;The preservation of confidentiality, integrity and availability of information; in addition, other properties such as authenticity, accountability, non-repudiation and reliability can also be involved.</description></item><item><title>02-basic-css</title><link>https://jethughes.github.io/notes/notes/02-basic-css/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/02-basic-css/</guid><description> slides</description></item><item><title>02-combinatorial-logic</title><link>https://jethughes.github.io/notes/notes/02-combinatorial-logic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/02-combinatorial-logic/</guid><description>slides
transistors
combinatorial-logic-circuit
boolean-equations
logic-gates</description></item><item><title>02-concepts-and-roles</title><link>https://jethughes.github.io/notes/notes/02-concepts-and-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/02-concepts-and-roles/</guid><description>slides News more personal email scams They have more knowledge about your personal information deakin university attack staff credentials were leaked and acces to students information was gathered rusian hackers attack lithuania attacks against india retbleed attack affects AMD and Intel CPUs (spectre-based speculative-execution attacks) Vulnerabilities a potential weakness in an asset or in its defense security control e.</description></item><item><title>02-version-control-system</title><link>https://jethughes.github.io/notes/notes/02-version-control-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/02-version-control-system/</guid><description>git
VCS</description></item><item><title>03-agile-methodologies</title><link>https://jethughes.github.io/notes/notes/03-agile-methodologies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/03-agile-methodologies/</guid><description>guilding philosphy to develop info systems in unkown, rapidly changing evnironments
&amp;ldquo;Chaordic&amp;rdquo;
The agile manifesto
1 scrum Development is split into many short (~30 day) &amp;ldquo;sprints&amp;rdquo; of intense focus where the entire team is involved</description></item><item><title>03-more-css</title><link>https://jethughes.github.io/notes/notes/03-more-css/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/03-more-css/</guid><description>slides</description></item><item><title>03-sequential-logic-circuits</title><link>https://jethughes.github.io/notes/notes/03-sequential-logic-circuits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/03-sequential-logic-circuits/</guid><description>comb log. circuits always produce the same output with the same inputs
Sequential logic circuit output depends not only on the inputs but also past history (memory)</description></item><item><title>03-threats-social-engineering-and-failures</title><link>https://jethughes.github.io/notes/notes/03-threats-social-engineering-and-failures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/03-threats-social-engineering-and-failures/</guid><description>News kiwis urged to get new passwords by government cybersecurity agency (&amp;ldquo;big password energy&amp;rdquo;) ukraine cyber agency reports cyber attack surge plymouth households hit by clarion housing cyber attack facebook &amp;ldquo;unintentionally uploaded&amp;rdquo; 1.</description></item><item><title>04-authentication-authorisation-passwords</title><link>https://jethughes.github.io/notes/notes/04-authentication-authorisation-passwords/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/04-authentication-authorisation-passwords/</guid><description>authorisation authentication passwords Authentication proof of identity need to be sure a user is who they say they are before you can trust them usually done via a unique identifier unique username and a secret that is only known by the authorised user password biometrics 2fa code MFA many secrets protects user/system in the case that a password is disclosed additional secrets generated at the time of use.</description></item><item><title>04-computer-architecture</title><link>https://jethughes.github.io/notes/notes/04-computer-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/04-computer-architecture/</guid><description>memory
control-unit
bus
CPU
ALU</description></item><item><title>04-evaluation-methods-birth-of-hci</title><link>https://jethughes.github.io/notes/notes/04-evaluation-methods-birth-of-hci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/04-evaluation-methods-birth-of-hci/</guid><description>evaluating-designs birth-of-hci Possible exam questions
Define User Experience! Difference User Experience - Usability Describe applications where the subject’s satisfaction is of less importance than effectiveness and efficiency Compare the advantages and disadvantages of a laboratory based and a field based evaluation of a user interface?</description></item><item><title>04-requirements</title><link>https://jethughes.github.io/notes/notes/04-requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/04-requirements/</guid><description>requirements</description></item><item><title>05-6809-assembly</title><link>https://jethughes.github.io/notes/notes/05-6809-assembly/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/05-6809-assembly/</guid><description>6809 Warnings different CPU architectures have their own machine codes and their own assembly languages assembly language programs are not portable across CPU architectures (e.</description></item><item><title>05-cryptography</title><link>https://jethughes.github.io/notes/notes/05-cryptography/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/05-cryptography/</guid><description>news zodiac killer code cracked twitter leak Brief history study of secret messages confidentiality of cia-triad also small role in integrity (authentication of message, and sender) history of cyprtopgraphy is interwined with information technology Language use for communication seems to be part of human nature: perhaps the use of covert lanuage is too</description></item><item><title>05-javascript</title><link>https://jethughes.github.io/notes/notes/05-javascript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/05-javascript/</guid><description>Javascript DOM JS can access and change all the elements of an HTML document When a webpage is loaded, the browser creates a DOM of the page The HTML DOM model is contructed as a tree of Objects JS can:</description></item><item><title>06-6809-programming</title><link>https://jethughes.github.io/notes/notes/06-6809-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/06-6809-programming/</guid><description>difficult
no variables GOTO not loops only compare ints and bytes not really routines all vars global case sensitive Hello World need a routine that given a string will print each chracter one at a time need to know how to print Routines 1 2 routine: rts no params no local vars calling routine</description></item><item><title>06-async-javascript</title><link>https://jethughes.github.io/notes/notes/06-async-javascript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/06-async-javascript/</guid><description>Async programming allows you to start a potentially long running task have still be able to interact while it it running</description></item><item><title>06-business-functions-and-use-cases</title><link>https://jethughes.github.io/notes/notes/06-business-functions-and-use-cases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/06-business-functions-and-use-cases/</guid><description>approaches-to-systems-development
What are the two main approaches to systems development and how do they differ object oriented - system is a collection of objects tranditional - system is a collectin of processes business-functions</description></item><item><title>06-hashing-binary-public-key-cryptography</title><link>https://jethughes.github.io/notes/notes/06-hashing-binary-public-key-cryptography/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/06-hashing-binary-public-key-cryptography/</guid><description>news pegasus project cutting internet cables Hash function yields a small, districtive value (hash or digest) from an arbitrarily sized input.</description></item><item><title>07-6809-advanced</title><link>https://jethughes.github.io/notes/notes/07-6809-advanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/07-6809-advanced/</guid><description>addressing modes implied inca immediate lda #$00 extended LDA $31FE extended indirect LDA [$31FE] or LDA [HERE] points to a memory location which specifies another memory location direct LDA $ff or lda &amp;lt;HERE register trf X,Y indexed LDA $311E, X use memory location that is the sum of the operands LDA ,X LDA $23,X etc indexed indirect LDA [$10, X] relative BEQ HERE BEQ does a short branch LBEQ does a long branch the value is relative to HERE program counter relative LDA TABLE,PCR ; A = the value stored at TABLE if all memory references are relative, then the program cna be loaded anywhere is memory, and will still work.</description></item><item><title>07-business-process-modelling</title><link>https://jethughes.github.io/notes/notes/07-business-process-modelling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/07-business-process-modelling/</guid><description> understand core conepts related to business process mondelling learn about commonly used business process modelling notations understand the elemeents of a UML activity diagram What is a business process business-process business-process-model business-process-model-and-notation unified-modelling-language</description></item><item><title>07-cryptography-applications</title><link>https://jethughes.github.io/notes/notes/07-cryptography-applications/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/07-cryptography-applications/</guid><description>interest doesn&amp;rsquo;t have low level security
this would decrease compatibility easier to add this at hosts and software layer Layer model each layer of network hides information about lower levels and adds information for higher levels\ transmission is only at physical layer OSI model - more complicated but most common</description></item><item><title>07-heuristic-evaluation-cont</title><link>https://jethughes.github.io/notes/notes/07-heuristic-evaluation-cont/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/07-heuristic-evaluation-cont/</guid><description>heuristic-evaluation</description></item><item><title>07-js-server-vs-client-side</title><link>https://jethughes.github.io/notes/notes/07-js-server-vs-client-side/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/07-js-server-vs-client-side/</guid><description/></item><item><title>07-mergesort-1</title><link>https://jethughes.github.io/notes/notes/07-mergesort-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/07-mergesort-1/</guid><description>mergesort
quicksort
divide-and-conquer</description></item><item><title>07-testing</title><link>https://jethughes.github.io/notes/notes/07-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/07-testing/</guid><description>testing
test-driven-development
unit-testing
understand that testing is useful for detecting bugs</description></item><item><title>08-business-patterns</title><link>https://jethughes.github.io/notes/notes/08-business-patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/08-business-patterns/</guid><description>entity-relationship-diagrams</description></item><item><title>08-debugging</title><link>https://jethughes.github.io/notes/notes/08-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/08-debugging/</guid><description>debugging</description></item><item><title>08-intro-to-c</title><link>https://jethughes.github.io/notes/notes/08-intro-to-c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/08-intro-to-c/</guid><description>Developed 1972 for Unix
widely used compilers esxist for most OSs and architectiures diverse use OSs, device drivers, protocol stacks less so for application software low level language features map to CPU features not Object Oriented no classes etc “C is an imperative procedural language supporting structured programming, lexical variable scope, and recursion, with a static type system.</description></item><item><title>08-mergesort-2</title><link>https://jethughes.github.io/notes/notes/08-mergesort-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/08-mergesort-2/</guid><description>mergesort</description></item><item><title>08-personas-and-scenarios</title><link>https://jethughes.github.io/notes/notes/08-personas-and-scenarios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/08-personas-and-scenarios/</guid><description> personas-and-scenarios storyboards</description></item><item><title>08-web-frameworks</title><link>https://jethughes.github.io/notes/notes/08-web-frameworks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/08-web-frameworks/</guid><description>slides</description></item><item><title>09-data-modelling-and-normalisation</title><link>https://jethughes.github.io/notes/notes/09-data-modelling-and-normalisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/09-data-modelling-and-normalisation/</guid><description>redundancy-and-anomalies dependencies wia functional dependecy::when some attribute has exactly one associated other attribute wia transitive dependency:: A→B, B→C Transitive dependency wia partial dependency:: when a subset of the left determines the rightwia multivalued dependency::when something has a set of associated values of another attribute</description></item><item><title>09-documentation</title><link>https://jethughes.github.io/notes/notes/09-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/09-documentation/</guid><description>documentation</description></item><item><title>09-paper-prototypes-wiz-of-oz-video-prototypes</title><link>https://jethughes.github.io/notes/notes/09-paper-prototypes-wiz-of-oz-video-prototypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/09-paper-prototypes-wiz-of-oz-video-prototypes/</guid><description>wizard-of-oz video-prototyping storyboards-mockups-paper-prototypes Paper protoypes brainstorming. e.g., refinement of design and communicating ideas. e.</description></item><item><title>09-stacks-queues-heaps</title><link>https://jethughes.github.io/notes/notes/09-stacks-queues-heaps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/09-stacks-queues-heaps/</guid><description> dynamic-linear-datatype Stack Queue priority-queue heap</description></item><item><title>09-web-databases-networks</title><link>https://jethughes.github.io/notes/notes/09-web-databases-networks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/09-web-databases-networks/</guid><description>slides</description></item><item><title>10-continuous-integration-1</title><link>https://jethughes.github.io/notes/notes/10-continuous-integration-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/10-continuous-integration-1/</guid><description> continuous-integration
explain the term continuous integration describe different purposes for CI indicate how CI jobs are usually triggered understand implications of CI running asynchronously Exlplain how to manage output from CI jobs describe role of stages and jobs within gitlab pipelines indicate how CI specifications are stored</description></item><item><title>10-design-heuristics-1</title><link>https://jethughes.github.io/notes/notes/10-design-heuristics-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/10-design-heuristics-1/</guid><description>1 Wizard of OZ wizard-of-oz simulating machine behavior with human operators
2 Video prototyping video-prototyping
3 Creating and comparing alternatives create multiple ideas in parallel rather than one after the other</description></item><item><title>10-heaps-and-heapsort</title><link>https://jethughes.github.io/notes/notes/10-heaps-and-heapsort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/10-heaps-and-heapsort/</guid><description>heapsort
1 Overview [[notes/heap]]
2 Operations 2.1 Add element Assumptions
access first vacant position set (or find) the value $H.</description></item><item><title>10-oop-concepts-and-uml</title><link>https://jethughes.github.io/notes/notes/10-oop-concepts-and-uml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/10-oop-concepts-and-uml/</guid><description> what is the concept of encapsulation and how is it enforced for objects how does and object refernce differ from a relational foreign key give an example of how difference UML diagram types can be linked when modelling a system object unified-modelling-language</description></item><item><title>10-routes-controllers</title><link>https://jethughes.github.io/notes/notes/10-routes-controllers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/10-routes-controllers/</guid><description>slides
Routes and controllers MVC model design pattern used in ios development routes - foward requests to appropriate controller functions controller functions - get data from models, create html, display data, and return to view views (templates) - used by controllers to render data</description></item><item><title>11-class-diagrams</title><link>https://jethughes.github.io/notes/notes/11-class-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/11-class-diagrams/</guid><description>class-diagrams</description></item><item><title>11-continuous-integration-2</title><link>https://jethughes.github.io/notes/notes/11-continuous-integration-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/11-continuous-integration-2/</guid><description>Appreciate that GitLab is a complex software Understand where CI jobs scripts get run explain why repository servers can host websites Understand how gitblab dternmimines awhen a CI script failed Describe a way in which CI scripts scan handle secrets Outline uses of local git hook scripts continuous integration</description></item><item><title>11-design-heuristics-2</title><link>https://jethughes.github.io/notes/notes/11-design-heuristics-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/11-design-heuristics-2/</guid><description> Show System Status Familiar Metaphors And Language User Freedom And Control</description></item><item><title>11-sets-maps-trees</title><link>https://jethughes.github.io/notes/notes/11-sets-maps-trees/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/11-sets-maps-trees/</guid><description>A set is :: a collection of elements with no repetition allowed A hash-map is :: a set of key value pairs A tree is :: a general concept of a way of organising data.</description></item><item><title>11-struct-and-union</title><link>https://jethughes.github.io/notes/notes/11-struct-and-union/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/11-struct-and-union/</guid><description>Struct not a calss
class like composite data type called struct POD plain old data declare 1 2 3 4 5 6 7 8 9 struct &amp;lt;name&amp;gt;{ &amp;lt;type&amp;gt;&amp;lt;name&amp;gt;; &amp;lt;type&amp;gt;&amp;lt;name&amp;gt;; } &amp;lt;variable&amp;gt;; struct point_2d { double x; double y; } point; typically an anonymous struct is declared and then given a name with typedef</description></item><item><title>11-view-templates</title><link>https://jethughes.github.io/notes/notes/11-view-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/11-view-templates/</guid><description>slides
view templates pug pug is a view engine.
1 2 app.set(&amp;#39;views&amp;#39;, path.join(__dirname, &amp;#39;views&amp;#39;)) app.set(&amp;#39;view engine&amp;#39;, &amp;#39;pug&amp;#39;) a pug file</description></item><item><title>12-automation</title><link>https://jethughes.github.io/notes/notes/12-automation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/12-automation/</guid><description>links: cosc-202-lectures, slides
automation
Garbage notes The use of automatic equipment in a production process. We desire to remove repetive work within software development</description></item><item><title>12-binary-search-tree-operations</title><link>https://jethughes.github.io/notes/notes/12-binary-search-tree-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/12-binary-search-tree-operations/</guid><description>Recall binary-search-tree
binary search tree operations</description></item><item><title>12-design-heuristics-3</title><link>https://jethughes.github.io/notes/notes/12-design-heuristics-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/12-design-heuristics-3/</guid><description> Consistency And Standards Error Prevention Recognition Over Recall flexibility-and-efficiency Aesthetic and Minimalist Design</description></item><item><title>12-ethics-and-computing</title><link>https://jethughes.github.io/notes/notes/12-ethics-and-computing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/12-ethics-and-computing/</guid><description>what is ethics concerned with the fundamental issues of practical decision making. what actions should we take or not take?</description></item><item><title>12-modelling-behaviour</title><link>https://jethughes.github.io/notes/notes/12-modelling-behaviour/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/12-modelling-behaviour/</guid><description>slides
modelling-behaviour
method signatures inheritance of behaviour lower level sequencing and flow of control compartmentalisation into &amp;ldquo;subsystems&amp;rdquo; Compare and contrast the two typical approaches to inheriting behaviour in OO systems.</description></item><item><title>12-pen-testing</title><link>https://jethughes.github.io/notes/notes/12-pen-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/12-pen-testing/</guid><description>News DOC mt cook ransomware Pen Testing intrustion detection, system monitoring, penetration testing
prevention detection analysis some ovelap with forensices IT interesting in prevention and detection security specialists more interesting in analysis Terminology hacker was originially positive - enthusism etc became negative through public media (wargames 1983, Hackers 1984) cracking can mean bad hacking white hat - good black hat - bad others: grey hat - may violate laws to discover vulnerabilites for good reasons script kiddie - uses ready made exploits hacktivist - hacks for political/social causes (e.</description></item><item><title>12-pointers-to-routines</title><link>https://jethughes.github.io/notes/notes/12-pointers-to-routines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/12-pointers-to-routines/</guid><description>compiler ⇒ converts high level language description of program into assembly description of the program assembler ⇒ converts assebly language description into machine code description loader ⇒ loads program into memory, loaded at $4000</description></item><item><title>13-bst-traversals-and-balance</title><link>https://jethughes.github.io/notes/notes/13-bst-traversals-and-balance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/13-bst-traversals-and-balance/</guid><description>tree-traversal balancing-binary-search-trees</description></item><item><title>13-code-librarires</title><link>https://jethughes.github.io/notes/notes/13-code-librarires/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/13-code-librarires/</guid><description> software library
Explain what a software library is Describe reasons for/against using libraries Understand transitive dependencies in libraries Appreciate your obligations from using libraries Outline considerations when writing libraries Highlight features of the Java standard libraries</description></item><item><title>13-databases-1</title><link>https://jethughes.github.io/notes/notes/13-databases-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/13-databases-1/</guid><description>What is a database an integrated collection of data implicit properties represents some aspect of th real world, called miniworld is a coherent collection of data with inherent meaning is designed built and populated with data for a specific purpose DBMS a software system designed to store, manage, and facilitate access to the database Oracle, SQL erver, MySQL, MonogDB Application program a program that provides access to the dtabase by sending queries and requests for data to the DBMS This course modelling and design of DBs programming (SQL + appliation development) DBMS implementation specifiically relational databases</description></item><item><title>13-design-heuristics-4</title><link>https://jethughes.github.io/notes/notes/13-design-heuristics-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/13-design-heuristics-4/</guid><description>aesthetic-and-minimalist-design help-and-documentation recognise-and-recover-from-errors anti-design-heristics dark-patterns</description></item><item><title>13-OS-intro</title><link>https://jethughes.github.io/notes/notes/13-OS-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/13-OS-intro/</guid><description>why learn OS security optimisation wierd bugs &amp;ldquo;crown of programming&amp;rdquo; understand hardware better embedded sys and IoT co-design of hardware and software what is an OS a program (also called OS kernel) loaded onto RAM first when pc is turned on OS kernel (in kernel space) has highest privilege and can access any hardware directly user programs (in user space) cannot acces hardware unless permitted otherwise by the OS kernel via service request (sys call) a program (OS kernel) that manages the different aspects of the opereration of the machine and runs with the highest privilege in a protected domain</description></item><item><title>13-pen-testing-2</title><link>https://jethughes.github.io/notes/notes/13-pen-testing-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/13-pen-testing-2/</guid><description>Intrusion detection cont. Auditing a thorough prces of investiagtina nd analaysing aa system for vilnerabilities
e.g., pen testing Firewalls protect aginst network intrusions</description></item><item><title>13-UML-sequence-diagrams</title><link>https://jethughes.github.io/notes/notes/13-UML-sequence-diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/13-UML-sequence-diagrams/</guid><description>sequence-diagrams</description></item><item><title>14-apis</title><link>https://jethughes.github.io/notes/notes/14-apis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/14-apis/</guid><description>purpose of apis apis vs code libraries why web technologies assist API development REST apis in cloud mircoservices building APIs maintenance of APIs application-programming-interface</description></item><item><title>14-balancing-bsts</title><link>https://jethughes.github.io/notes/notes/14-balancing-bsts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/14-balancing-bsts/</guid><description> balancing-binary-search-trees
avl-tree red-black-tree treap</description></item><item><title>14-direct-manipulation-and-mental-models</title><link>https://jethughes.github.io/notes/notes/14-direct-manipulation-and-mental-models/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/14-direct-manipulation-and-mental-models/</guid><description>Command line vs UI table
Object action models object action model: user selects an object then selects the action to perform on the objct</description></item><item><title>14-processes-and-system-calls</title><link>https://jethughes.github.io/notes/notes/14-processes-and-system-calls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/14-processes-and-system-calls/</guid><description>heirarchical structure in software systems system calls and interrupts representing process in OSs overview of process scheduling Heirarchical structure software systems have modularity</description></item><item><title>15-containers</title><link>https://jethughes.github.io/notes/notes/15-containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/15-containers/</guid><description>containers
Describe what software containers are basically lightweight virtual machines Explain why containers are useful Encapsulate a computing environment Outline the role of container registries Store and share images E.</description></item><item><title>15-file-systems</title><link>https://jethughes.github.io/notes/notes/15-file-systems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/15-file-systems/</guid><description>what is a file (LINUX) an interface of OS to users
os manages files just as files - it doesn&amp;rsquo;t care what type of file it is - they are all bytes arranges logically in sequence.</description></item><item><title>15-from-models-to-code-and-back</title><link>https://jethughes.github.io/notes/notes/15-from-models-to-code-and-back/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/15-from-models-to-code-and-back/</guid><description> UML to Java Foward Engineering round-trip-engineering</description></item><item><title>15-mental-models-representation-matters-distributing-cognition</title><link>https://jethughes.github.io/notes/notes/15-mental-models-representation-matters-distributing-cognition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/15-mental-models-representation-matters-distributing-cognition/</guid><description>doors are simple. But they are still done wrong very often. Incorrect labelling can give the user a wrong mental model - widening the &amp;ldquo;gulf of execution&amp;rdquo;.</description></item><item><title>15-policies-standards-practices</title><link>https://jethughes.github.io/notes/notes/15-policies-standards-practices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/15-policies-standards-practices/</guid><description>news apple securit flaw for iphones ipads and macs chrome patch actively exloited zero day github blighted by researcher who created thousands of malicious projects russian cyber attacks of lockheed martin armed forces hack into HIMARS Policies Defn: a plan or course of action to influence and determine decisions</description></item><item><title>16-cloud-security</title><link>https://jethughes.github.io/notes/notes/16-cloud-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/16-cloud-security/</guid><description>what is cloud computing what is service virtualisation security issues what is cloud largely a marketing term vague - doesn&amp;rsquo;t mean much slowly replacing the word &amp;lsquo;web&amp;rsquo; implies</description></item><item><title>16-compilers</title><link>https://jethughes.github.io/notes/notes/16-compilers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/16-compilers/</guid><description>describe what it is and what is does
compilers vs interpreters
compile stages
why java is atypical of compiled languages</description></item><item><title>16-device-drivers</title><link>https://jethughes.github.io/notes/notes/16-device-drivers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/16-device-drivers/</guid><description>Device controller and driver driver Defn: a special kernel module that contrls the operations of a device with the device specific information controller Defn: a hardware unit on a device that can know and control a devices status or behaviour, which communicates with the CPU via a driver</description></item><item><title>16-distributing-cognition-and-visual-design-typography</title><link>https://jethughes.github.io/notes/notes/16-distributing-cognition-and-visual-design-typography/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/16-distributing-cognition-and-visual-design-typography/</guid><description> representation-and-distributing-cognition typography visual-design</description></item><item><title>16-hasing-maps-sets</title><link>https://jethughes.github.io/notes/notes/16-hasing-maps-sets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/16-hasing-maps-sets/</guid><description>Hash functions Collisions Chaining open addressing basic implementation</description></item><item><title>16-networks</title><link>https://jethughes.github.io/notes/notes/16-networks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/16-networks/</guid><description>Types of devices everything is connected
hosts - the end systems which run network apps</description></item><item><title>16-reverse engineering</title><link>https://jethughes.github.io/notes/notes/16-reverse-engineering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/16-reverse-engineering/</guid><description>uml-java-reverse-engineering</description></item><item><title>17-app-layer</title><link>https://jethughes.github.io/notes/notes/17-app-layer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/17-app-layer/</guid><description>Client-server vs peer to peer social network email multi player games video streaming P2P file sharing voice over IP e.</description></item><item><title>17-collision-resolution-probing</title><link>https://jethughes.github.io/notes/notes/17-collision-resolution-probing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/17-collision-resolution-probing/</guid><description>linear-probing</description></item><item><title>17-data-access</title><link>https://jethughes.github.io/notes/notes/17-data-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/17-data-access/</guid><description> data-access
file-based-storage database-based-storage data-access-object java-database-connectibity</description></item><item><title>17-dynamic-programming</title><link>https://jethughes.github.io/notes/notes/15-dynamic-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/15-dynamic-programming/</guid><description/></item><item><title>17-grids-grouping-alignment-reading-and-navigation</title><link>https://jethughes.github.io/notes/notes/17-grids-grouping-alignment-reading-and-navigation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/17-grids-grouping-alignment-reading-and-navigation/</guid><description> layout closure grouping similarity color reading-and-navigating</description></item><item><title>17-linkers-and-loaders</title><link>https://jethughes.github.io/notes/notes/17-linkers-and-loaders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/17-linkers-and-loaders/</guid><description>Appreciate kernel / userspace distinction
Sketch what OS loaders need to achieve
Contrast running Java versus C code</description></item><item><title>17-ML-in-IA-1</title><link>https://jethughes.github.io/notes/notes/17-ML-in-IA-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/17-ML-in-IA-1/</guid><description>traditional approaches
hand crafted and curated based on intuition not evidence (e.g., password criteria example) static and difficult to scale and adapt Everything we do generates data.</description></item><item><title>17-processes-communication</title><link>https://jethughes.github.io/notes/notes/17-processes-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/17-processes-communication/</guid><description>cooperating processes defn: coop process - execution of one process can affect the execution of another. e.e.g, processes for aprallel computing, threads for multithreading.</description></item><item><title>18-advanced-SQL</title><link>https://jethughes.github.io/notes/notes/18-advanced-sql-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/18-advanced-sql-1/</guid><description>varchar usually bigger than you think
CRUD insert adds a row select retrieves rows from the table ouput can be &amp;ldquo;saved&amp;rdquo; as a view changes to the underlying table also chagnes the view update modifies rows delete removes rows test as a select statement first SQL DAO programming We want to miniminse load on sql as connecting to database is expensive.</description></item><item><title>18-build-tools</title><link>https://jethughes.github.io/notes/notes/18-build-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/18-build-tools/</guid><description>understnad the purpose of build tools automate the construction of software sketch how make&amp;rsquo;s rules (re)build software has a set of taget and a set of sources checks whether targets are older than sources a MakeFile contains a list of commands that build the tager from the source builds in the correct order (topologically) e.</description></item><item><title>18-ethics-in-hci</title><link>https://jethughes.github.io/notes/notes/18-ethics-in-hci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/18-ethics-in-hci/</guid><description>hci-ethics</description></item><item><title>18-hash-examples</title><link>https://jethughes.github.io/notes/notes/18-hash-examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/18-hash-examples/</guid><description/></item><item><title>18-ML-in-IA-2</title><link>https://jethughes.github.io/notes/notes/18-ML-in-IA-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/18-ML-in-IA-2/</guid><description>nefarious uses of ml password guessing normally based on heuristics that are designed by humans biased may not match true distributions of passwords leaked data can be used to &amp;ldquo;learn&amp;rdquo; what to guess gain insight into what users use as passwords alternative - PassGan use statistical distribution of passwords then use this to generate guesses can generate passwords that are likely to be used</description></item><item><title>18-processes-sharing-and-threads</title><link>https://jethughes.github.io/notes/notes/18-processes-sharing-and-threads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/18-processes-sharing-and-threads/</guid><description>Shared memory for processes Can&amp;rsquo;t assume all variables are initally zero. OS decide which process maps who which physical address</description></item><item><title>18-transport-layer</title><link>https://jethughes.github.io/notes/notes/18-transport-layer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/18-transport-layer/</guid><description>chapter 3
service provided by transport layer services
process to process communication logical communication between application processes multi and demulti plexing communication for multiple applications of the same host flow control ensure production reate &amp;lt;= consuption rate congestion control too many sender, sending too fast protocols</description></item><item><title>19-advanced-sql-2</title><link>https://jethughes.github.io/notes/notes/19-advanced-sql-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/19-advanced-sql-2/</guid><description>CASE basically a switch statement
derived valye where calcyulation isnt simple standardising values e.g., booleans: t/f, y/n, 0/1 flipping between row and col orientation (privoting) all students vs all on one students papers Set operators relations are sets of tuples ⇒ we can use set operators</description></item><item><title>19-cpu-scheduling</title><link>https://jethughes.github.io/notes/notes/19-cpu-scheduling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/19-cpu-scheduling/</guid><description>why shedule?
keep cpu busy (cpu utilisation) so processed dont hae to spend time waithing for the CPU even if cpu is always bust executing processses in different orders can change the average time spent in queue cpu burst (diagram is old the timing will have changed) between burst - waiting for io so that interactive processes respond quickly time spent waiting in total average time between visits to CPU criteria</description></item><item><title>19-deepfakes</title><link>https://jethughes.github.io/notes/notes/19-deepfakes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/19-deepfakes/</guid><description>what, origins, how issue with trust politics etc
essentially better face swapping
replaces traditional studio artist with ML</description></item><item><title>19-graphs</title><link>https://jethughes.github.io/notes/notes/19-graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/19-graphs/</guid><description>graphs</description></item><item><title>19-network-layer-data-plane</title><link>https://jethughes.github.io/notes/notes/19-network-layer-data-plane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/19-network-layer-data-plane/</guid><description>transport layer messages are divided into segments passed to network layer sender: encapsulates segments into IP packets, passes to link layer reciever: deliver segments to tranport layer protocol sender and reciever are connected by multple routers routers examine header fields in all IP packets passing through it moves IP packers from input ports to output ports to transfer packets along end-end path network layer protocols IP internet control message protocol (ICMP) use for troubleshooting type things Forwarding forwarding</description></item><item><title>19-security</title><link>https://jethughes.github.io/notes/notes/19-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/19-security/</guid><description>why cybersecurity is a growing concern more software ∴ more dependecies ∴ more complex ∴ more &amp;ldquo;surface area&amp;rdquo; of risk of vulnerability sketch confidentiality, integrity, and avalability security confidentiality - protecting data from being stolen integrity - attacks on data with the aim to decieve users avalability - e.</description></item><item><title>20-data-integrity</title><link>https://jethughes.github.io/notes/notes/20-data-integrity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/20-data-integrity/</guid><description>Data Integrity GIGO
Types of error
ennecessary duplication of data missing information (expecially nulls) referential integrity problems: broken links, &amp;ldquo;orhpan&amp;rdquo; records (foreign keys) data entry errors: typos/keying errors, value in wrong field invalid/nonsensical data, e.</description></item><item><title>20-graphs-2</title><link>https://jethughes.github.io/notes/notes/20-graphs-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/20-graphs-2/</guid><description>Graph drawing is its own problem.
One easy way is to draw the vertices is clockwise order and draw edges between them</description></item><item><title>20-network-layer-control-plane</title><link>https://jethughes.github.io/notes/notes/20-network-layer-control-plane/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/20-network-layer-control-plane/</guid><description>slides
per-router control vs SDN per router each router runs a routing algorithm router communicate with each other and creates a forwarding table SDN software defined networking a remote controller computes, and install fowarding tables in routers</description></item><item><title>20-SE-in-IA</title><link>https://jethughes.github.io/notes/notes/20-SE-in-IA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/20-SE-in-IA/</guid><description>why apps for IoT devices contain security flaws smart home security breaches kindles vulnerable libraries lead to vulnerable devices software helps us to use hardware need to make the software secure overview combines computer science, engineering, and maths to make software</description></item><item><title>20-software-licensing</title><link>https://jethughes.github.io/notes/notes/20-software-licensing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/20-software-licensing/</guid><description>pdf
what does it mean for people to use your software. What responsitilities do you have
Understand the default protection of code authors copyright Contrast ‘libre’ free and ‘gratis’ free libre: free as in freedom gratis: free as in no cost Define what makes open source software floss - free libre open source software Contrast copyleft and more permissive licences copyleft &amp;ldquo;viral licensing&amp;rdquo; usage of copyleft software required your software be copyleft also derivative must &amp;ldquo;copy&amp;rdquo; the same license others e.</description></item><item><title>20-sync-deadlock</title><link>https://jethughes.github.io/notes/notes/20-sync-deadlock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/20-sync-deadlock/</guid><description>Bounded buffer problem producer consumer problem
issues
no data in buffe: consumer has nothing to consume buffer is full: no space for producer to produce private vars</description></item><item><title>21-data-link-layer</title><link>https://jethughes.github.io/notes/notes/21-data-link-layer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/21-data-link-layer/</guid><description>data link layer services transfer datgram from one node to physically adjacent node over a link terminology hosts and routers: node communication channels between adjacent nodes: links wired wireless LANs layer-2 packet: frame, encapsulates datagram services</description></item><item><title>21-SE-in-IA-2</title><link>https://jethughes.github.io/notes/notes/21-SE-in-IA-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/21-SE-in-IA-2/</guid><description>need in all phases often overlooked in feasability stages security requirements not defined built without thinking about security tests do not take security into account without security evolution can become cumbersome more costly to fix bug in development than in design</description></item><item><title>21-software-architecture-and-templates</title><link>https://jethughes.github.io/notes/notes/21-software-architecture-and-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/21-software-architecture-and-templates/</guid><description>software-architectures
system-templates</description></item><item><title>22-digital-preservation</title><link>https://jethughes.github.io/notes/notes/22-digital-preservation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/22-digital-preservation/</guid><description>how long will data survive?
data rot
eveything wears out digital media degrades unreadable media damaged files backups may help hardware and software becomes obsolete cloud service shut down os no longer exists no device to read media no software to read files format documentation non-existent or missing file system changes - lost metadata Dark ages 2 preservation of digital material continuous format migration</description></item><item><title>22-LAN-physical-layer</title><link>https://jethughes.github.io/notes/notes/22-LAN-physical-layer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/22-LAN-physical-layer/</guid><description>LAN vs WAN Local area network
a network connecting computers within a limited geographic area e.g., building, school, home etc wired or wireless Wide Area network</description></item><item><title>22-open-source-software</title><link>https://jethughes.github.io/notes/notes/22-open-source-software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/22-open-source-software/</guid><description>Describe Origination how do floss projects get created forking an existing open source project mangement of existig project &amp;ldquo;run out of steam&amp;rdquo; users decide to take development of themselves some decides to apply an open source licence e.</description></item><item><title>22-performance-and-security</title><link>https://jethughes.github.io/notes/notes/22-performance-and-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/22-performance-and-security/</guid><description>Performance requirements e.g., credit card system functional reqs sales authorised only for valid cards generate monthly statements performance requirements cards are validated quickly statements are accurate and generated on time quickly, accurate, and on time need to be operationalised, measured, and tested.</description></item><item><title>22-trends-in-hci</title><link>https://jethughes.github.io/notes/notes/22-trends-in-hci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/22-trends-in-hci/</guid><description>[slides]( https://blackboard.otago.ac.nz/bbcswebdav/pid-2827522-dt-content-rid-18612267_1/courses/INFO203_S1DNIE_2022/2022/INFO203_Lecture23.pdf how the the methodology of HCI used.)
Theory vs practice. There is a lot of work being done t improve the methodology</description></item><item><title>23-digital-forensics</title><link>https://jethughes.github.io/notes/notes/23-digital-forensics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/23-digital-forensics/</guid><description>assit in legal/criminal proceedings
ICT in application to the law
requires broad range of technical knowledge
computers everywhere
IoT, PCs, severs/cloud, smart devices, network routers and storage devices, other embedded systems can all hold forensically significant data types of evidence direct evidence evidence which a witness can provide a direct account of in their testimony circumstansial evidence relates less directly to the facts of the case, requireing some analysis or inference suggests or indicates by seldom proves corroborating evidence supports or is consistent with other circumstantial evidence forensic evidence a kind of circumstantial evidence, usually submitte by an expert witness digital forensic principles needs to be valildated physical forensics such as fingerprinting and DNA are the same chain of custody, is vital and must be unbroken necessitates proper procedures and handling &amp;ldquo;everything leaves a trace&amp;rdquo; some provisos i the digital domain maintain neutrality and objectivity good understanding of stats and probability can be vital ethos search for truth appreciate limits of certainty no bias or prejudice can work for either side but only one at a time document everything defend demonstrate and duplicate methods computers as a witness good at storing info, with great reliability.</description></item><item><title>23-wireless-mobile</title><link>https://jethughes.github.io/notes/notes/23-wireless-mobile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/23-wireless-mobile/</guid><description>More wireless phones that wired phones. More mobile broadband than fixed broadband
two different challenges
communication over wireless link mobility: handling the mobile user to changes point of attachment elements</description></item><item><title>24-network-security</title><link>https://jethughes.github.io/notes/notes/24-network-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/24-network-security/</guid><description>what is it? confidentiality only sender and reciver should understand message contents encryption authentication sender and reciever want to confirm identity of each other message integrity sender and reciever want to ensure message not altered (in transit, or afterwards) without detection access and availablility services must be accessible and availble to users sender and recieves:</description></item><item><title>24-trends-in-hci-2</title><link>https://jethughes.github.io/notes/notes/24-trends-in-hci-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/24-trends-in-hci-2/</guid><description>Dark patterns Designing for elderlies the familiarity of local church in full size was good.
Digital fabrication 3d printing, interfaces which allow you to 3d print etc.</description></item><item><title>25-advanced-topics</title><link>https://jethughes.github.io/notes/notes/25-advanced-topics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/25-advanced-topics/</guid><description>Datacenter networks 10&amp;rsquo;s to 100&amp;rsquo;s of thousands of hosts, often closely coupled, in close proximity e-business :(e.g., amazon) content servers: youtube etc search engines, data mining (e.</description></item><item><title>25-cost-benefit-analysis</title><link>https://jethughes.github.io/notes/notes/25-cost-benefit-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/25-cost-benefit-analysis/</guid><description>justifying a project of difficult to prove justification three criteria need funds strong will deciding whether to pursue a project what the project address a problem opportunity directive time frame overall priority what options do you have Case study Feasability analysis should we build it (organisational) nature and strength of need strategic alignment?</description></item><item><title>25-network-security-2</title><link>https://jethughes.github.io/notes/notes/25-network-security-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/25-network-security-2/</guid><description>TLS security protocol above transport layer.
supported by most browsers prvides, confidentaility, integrity, authentication replaced SSL</description></item><item><title>8-application-security-1</title><link>https://jethughes.github.io/notes/notes/8-application-security-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/8-application-security-1/</guid><description>application development security
human error policy failure physical access network access social engineering software flaws third party created by you 10 immuntable laws of security If a bad guy can persuade you to run his program on your computer, it’s not your computer anymore.</description></item><item><title>analyzing-experiments</title><link>https://jethughes.github.io/notes/notes/analyzing-experiments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/analyzing-experiments/</guid><description>3 questions what does my data look like graphs, plots, differnent summary plots what are the overall numbers aggregate stats e.</description></item><item><title>assigning-participants-video</title><link>https://jethughes.github.io/notes/notes/assigning-participants-video/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/assigning-participants-video/</guid><description>assigning-participants</description></item><item><title>designing-studies-video</title><link>https://jethughes.github.io/notes/notes/designing-studies-video/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/designing-studies-video/</guid><description>designing-studies</description></item><item><title>running-in-person-experiments</title><link>https://jethughes.github.io/notes/notes/running-in-person-experiments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/running-in-person-experiments/</guid><description>in person
planning execution analyzing higher &amp;ldquo;bandwitdh&amp;rdquo; of engagement
Make clear goals scope purpose what you hope to learn hypothesis make a prediction schedule and location use an approprate and relevant location participants scenarios Plan out steps questions data to be collected set up roles e.</description></item><item><title>running-web-experiments</title><link>https://jethughes.github.io/notes/notes/running-web-experiments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/running-web-experiments/</guid><description>randomly split traffic to website between two versions.
then collection metrics about each version
web makes it easier to try out something new, and test if it is effective.</description></item></channel></rss>