<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>paradigm on</title><link>https://jethughes.github.io/notes/tags/paradigm/</link><description>Recent content in paradigm on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jethughes.github.io/notes/tags/paradigm/index.xml" rel="self" type="application/rss+xml"/><item><title>divide-and-conquer</title><link>https://jethughes.github.io/notes/notes/divide-and-conquer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/divide-and-conquer/</guid><description>Divide an conquer algorithms have three parts:
pre ⇒ break apartinto two or more smaller problems whose size add up to at most n Rec ⇒ solve those problems recursively post ⇒ combine solutions into a solution of the original problem</description></item><item><title>dynamic-programming</title><link>https://jethughes.github.io/notes/notes/dynamic-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/dynamic-programming/</guid><description>A method of designing algorithms, where a higher amount of space is used, in order to gain reduction in time. This usually done by remembering previous calculations.</description></item><item><title>imperative-programming</title><link>https://jethughes.github.io/notes/notes/imperative-programming-language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/imperative-programming-language/</guid><description>wikipedia article
Imperative programming is a paradigm in which code specifiec a series of commands which a computer executes to change a programs state</description></item><item><title>memoization</title><link>https://jethughes.github.io/notes/notes/memoization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/memoization/</guid><description>A method of designing algorithms which is similar to dynamic programming in that previously calculated answers are stored in memory</description></item><item><title>unite-and-conquer</title><link>https://jethughes.github.io/notes/notes/unite-and-conquer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jethughes.github.io/notes/notes/unite-and-conquer/</guid><description>5 | 8 | 2 | 3 | 4 | 1 | 7 | 6
5 8 | 2 3 | 1 4 | 6 7</description></item></channel></rss>